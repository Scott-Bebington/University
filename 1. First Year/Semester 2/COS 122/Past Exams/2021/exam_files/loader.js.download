!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=65)}({1:function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,"a",(function(){return r}))},10:function(e,t,n){"use strict";n.r(t);var r=n(1),i=n(5),s="@global",o=function(){function e(e,t,n){for(var o in this.type="global",this.at=s,this.rules=void 0,this.options=void 0,this.key=void 0,this.isProcessed=!1,this.key=e,this.options=n,this.rules=new i.RuleList(Object(r.a)({},n,{parent:this})),t)this.rules.add(o,t[o]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.addRule=function(e,t,n){var r=this.rules.add(e,t,n);return r&&this.options.jss.plugins.onProcessRule(r),r},t.indexOf=function(e){return this.rules.indexOf(e)},t.toString=function(){return this.rules.toString()},e}(),a=function(){function e(e,t,n){this.type="global",this.at=s,this.options=void 0,this.rule=void 0,this.isProcessed=!1,this.key=void 0,this.key=e,this.options=n;var i=e.substr("@global ".length);this.rule=n.jss.createRule(i,t,Object(r.a)({},n,{parent:this}))}return e.prototype.toString=function(e){return this.rule?this.rule.toString(e):""},e}(),u=/\s*,\s*/g;function l(e,t){for(var n=e.split(u),r="",i=0;i<n.length;i++)r+=t+" "+n[i].trim(),n[i+1]&&(r+=", ");return r}t.default=function(){return{onCreateRule:function(e,t,n){if(!e)return null;if(e===s)return new o(e,t,n);if("@"===e[0]&&"@global "===e.substr(0,"@global ".length))return new a(e,t,n);var r=n.parent;return r&&("global"===r.type||r.options.parent&&"global"===r.options.parent.type)&&(n.scoped=!1),!1===n.scoped&&(n.selector=e),null},onProcessRule:function(e,t){"style"===e.type&&t&&(function(e,t){var n=e.options,i=e.style,o=i?i[s]:null;if(o){for(var a in o)t.addRule(a,o[a],Object(r.a)({},n,{selector:l(a,e.selector)}));delete i[s]}}(e,t),function(e,t){var n=e.options,i=e.style;for(var o in i)if("@"===o[0]&&o.substr(0,s.length)===s){var a=l(o.substr(s.length),e.selector);t.addRule(a,i[o],Object(r.a)({},n,{selector:a})),delete i[o]}}(e,t))}}}},11:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ELEMENT_READJUSTMENT_WAIT_TIME=t.SPINNER_REMOVAL_WAIT_TIME=t.IMPORT_BUTTON_ID=t.CANCEL_BUTTON_ID=t.FOOTER_ID=t.UPPY_CONTAINER_ID=t.CLOSE_BUTTON_ID=t.HEADER_ID=t.SPINNER_FADE_OUT_CLASS=t.SPINNER_CONTAINER_ID=t.MessageStatus=void 0,function(e){e.cancel="cancel",e.success="success",e.logout="logout",e.open="open",e.options="options"}(t.MessageStatus||(t.MessageStatus={})),t.SPINNER_CONTAINER_ID="spinner-container",t.SPINNER_FADE_OUT_CLASS="fade-out",t.HEADER_ID="header",t.CLOSE_BUTTON_ID="close-button",t.UPPY_CONTAINER_ID="uppy-container",t.FOOTER_ID="buttonscontainer",t.CANCEL_BUTTON_ID="cancel",t.IMPORT_BUTTON_ID="startUpload",t.SPINNER_REMOVAL_WAIT_TIME=600,t.ELEMENT_READJUSTMENT_WAIT_TIME=100},4:function(e,t,n){"use strict";t.a=function(e,t){}},5:function(e,t,n){"use strict";n.r(t);var r=n(1),i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s="object"===("undefined"==typeof window?"undefined":i(window))&&"object"===("undefined"==typeof document?"undefined":i(document))&&9===document.nodeType,o=n(4);function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(e,t,n){return t&&a(e.prototype,t),n&&a(e,n),e}function l(e,t){return(l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function h(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,l(e,t)}function c(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}n.d(t,"RuleList",(function(){return K})),n.d(t,"SheetsManager",(function(){return be})),n.d(t,"SheetsRegistry",(function(){return Z})),n.d(t,"create",(function(){return Re})),n.d(t,"createGenerateId",(function(){return ie})),n.d(t,"createRule",(function(){return p})),n.d(t,"getDynamicStyles",(function(){return me})),n.d(t,"hasCSSTOMSupport",(function(){return Se})),n.d(t,"sheets",(function(){return ee})),n.d(t,"toCssValue",(function(){return v}));var d={}.constructor;function f(e){if(null==e||"object"!=typeof e)return e;if(Array.isArray(e))return e.map(f);if(e.constructor!==d)return e;var t={};for(var n in e)t[n]=f(e[n]);return t}function p(e,t,n){void 0===e&&(e="unnamed");var r=n.jss,i=f(t),s=r.plugins.onCreateRule(e,i,n);return s||(e[0],null)}var y=function(e,t){for(var n="",r=0;r<e.length&&"!important"!==e[r];r++)n&&(n+=t),n+=e[r];return n},v=function(e,t){if(void 0===t&&(t=!1),!Array.isArray(e))return e;var n="";if(Array.isArray(e[0]))for(var r=0;r<e.length&&"!important"!==e[r];r++)n&&(n+=", "),n+=y(e[r]," ");else n=y(e,", ");return t||"!important"!==e[e.length-1]||(n+=" !important"),n};function g(e,t){for(var n="",r=0;r<t;r++)n+="  ";return n+e}function m(e,t,n){void 0===n&&(n={});var r="";if(!t)return r;var i=n.indent,s=void 0===i?0:i,o=t.fallbacks;if(e&&s++,o)if(Array.isArray(o))for(var a=0;a<o.length;a++){var u=o[a];for(var l in u){var h=u[l];null!=h&&(r&&(r+="\n"),r+=g(l+": "+v(h)+";",s))}}else for(var c in o){var d=o[c];null!=d&&(r&&(r+="\n"),r+=g(c+": "+v(d)+";",s))}for(var f in t){var p=t[f];null!=p&&"fallbacks"!==f&&(r&&(r+="\n"),r+=g(f+": "+v(p)+";",s))}return(r||n.allowEmpty)&&e?(r&&(r="\n"+r+"\n"),g(e+" {"+r,--s)+g("}",s)):r}var b=/([[\].#*$><+~=|^:(),"'`\s])/g,S="undefined"!=typeof CSS&&CSS.escape,R=function(e){return S?S(e):e.replace(b,"\\$1")},x=function(){function e(e,t,n){this.type="style",this.key=void 0,this.isProcessed=!1,this.style=void 0,this.renderer=void 0,this.renderable=void 0,this.options=void 0;var r=n.sheet,i=n.Renderer;this.key=e,this.options=n,this.style=t,r?this.renderer=r.renderer:i&&(this.renderer=new i)}return e.prototype.prop=function(e,t,n){if(void 0===t)return this.style[e];var r=!!n&&n.force;if(!r&&this.style[e]===t)return this;var i=t;n&&!1===n.process||(i=this.options.jss.plugins.onChangeValue(t,e,this));var s=null==i||!1===i,o=e in this.style;if(s&&!o&&!r)return this;var a=s&&o;if(a?delete this.style[e]:this.style[e]=i,this.renderable&&this.renderer)return a?this.renderer.removeProperty(this.renderable,e):this.renderer.setProperty(this.renderable,e,i),this;var u=this.options.sheet;return u&&u.attached,this},e}(),k=function(e){function t(t,n,r){var i;(i=e.call(this,t,n,r)||this).selectorText=void 0,i.id=void 0,i.renderable=void 0;var s=r.selector,o=r.scoped,a=r.sheet,u=r.generateId;return s?i.selectorText=s:!1!==o&&(i.id=u(c(c(i)),a),i.selectorText="."+R(i.id)),i}h(t,e);var n=t.prototype;return n.applyTo=function(e){var t=this.renderer;if(t){var n=this.toJSON();for(var r in n)t.setProperty(e,r,n[r])}return this},n.toJSON=function(){var e={};for(var t in this.style){var n=this.style[t];"object"!=typeof n?e[t]=n:Array.isArray(n)&&(e[t]=v(n))}return e},n.toString=function(e){var t=this.options.sheet,n=!!t&&t.options.link?Object(r.a)({},e,{allowEmpty:!0}):e;return m(this.selectorText,this.style,n)},u(t,[{key:"selector",set:function(e){if(e!==this.selectorText){this.selectorText=e;var t=this.renderer,n=this.renderable;if(n&&t)t.setSelector(n,e)||t.replaceRule(n,this)}},get:function(){return this.selectorText}}]),t}(x),P={onCreateRule:function(e,t,n){return"@"===e[0]||n.parent&&"keyframes"===n.parent.type?null:new k(e,t,n)}},O={indent:1,children:!0},w=/@([\w-]+)/,_=function(){function e(e,t,n){this.type="conditional",this.at=void 0,this.key=void 0,this.query=void 0,this.rules=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e;var i=e.match(w);for(var s in this.at=i?i[1]:"unknown",this.query=n.name||"@"+this.at,this.options=n,this.rules=new K(Object(r.a)({},n,{parent:this})),t)this.rules.add(s,t[s]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.indexOf=function(e){return this.rules.indexOf(e)},t.addRule=function(e,t,n){var r=this.rules.add(e,t,n);return r?(this.options.jss.plugins.onProcessRule(r),r):null},t.toString=function(e){if(void 0===e&&(e=O),null==e.indent&&(e.indent=O.indent),null==e.children&&(e.children=O.children),!1===e.children)return this.query+" {}";var t=this.rules.toString(e);return t?this.query+" {\n"+t+"\n}":""},e}(),I=/@media|@supports\s+/,E={onCreateRule:function(e,t,n){return I.test(e)?new _(e,t,n):null}},T={indent:1,children:!0},j=/@keyframes\s+([\w-]+)/,A=function(){function e(e,t,n){this.type="keyframes",this.at="@keyframes",this.key=void 0,this.name=void 0,this.id=void 0,this.rules=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0;var i=e.match(j);i&&i[1]?this.name=i[1]:this.name="noname",this.key=this.type+"-"+this.name,this.options=n;var s=n.scoped,o=n.sheet,a=n.generateId;for(var u in this.id=!1===s?this.name:R(a(this,o)),this.rules=new K(Object(r.a)({},n,{parent:this})),t)this.rules.add(u,t[u],Object(r.a)({},n,{parent:this}));this.rules.process()}return e.prototype.toString=function(e){if(void 0===e&&(e=T),null==e.indent&&(e.indent=T.indent),null==e.children&&(e.children=T.children),!1===e.children)return this.at+" "+this.id+" {}";var t=this.rules.toString(e);return t&&(t="\n"+t+"\n"),this.at+" "+this.id+" {"+t+"}"},e}(),N=/@keyframes\s+/,C=/\$([\w-]+)/g,M=function(e,t){return"string"==typeof e?e.replace(C,(function(e,n){return n in t?t[n]:e})):e},U=function(e,t,n){var r=e[t],i=M(r,n);i!==r&&(e[t]=i)},L={onCreateRule:function(e,t,n){return"string"==typeof e&&N.test(e)?new A(e,t,n):null},onProcessStyle:function(e,t,n){return"style"===t.type&&n?("animation-name"in e&&U(e,"animation-name",n.keyframes),"animation"in e&&U(e,"animation",n.keyframes),e):e},onChangeValue:function(e,t,n){var r=n.options.sheet;if(!r)return e;switch(t){case"animation":case"animation-name":return M(e,r.keyframes);default:return e}}},D=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return(t=e.call.apply(e,[this].concat(r))||this).renderable=void 0,t}return h(t,e),t.prototype.toString=function(e){var t=this.options.sheet,n=!!t&&t.options.link?Object(r.a)({},e,{allowEmpty:!0}):e;return m(this.key,this.style,n)},t}(x),q={onCreateRule:function(e,t,n){return n.parent&&"keyframes"===n.parent.type?new D(e,t,n):null}},V=function(){function e(e,t,n){this.type="font-face",this.at="@font-face",this.key=void 0,this.style=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.style=t,this.options=n}return e.prototype.toString=function(e){if(Array.isArray(this.style)){for(var t="",n=0;n<this.style.length;n++)t+=m(this.at,this.style[n]),this.style[n+1]&&(t+="\n");return t}return m(this.at,this.style,e)},e}(),B=/@font-face/,G={onCreateRule:function(e,t,n){return B.test(e)?new V(e,t,n):null}},W=function(){function e(e,t,n){this.type="viewport",this.at="@viewport",this.key=void 0,this.style=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.style=t,this.options=n}return e.prototype.toString=function(e){return m(this.key,this.style,e)},e}(),F={onCreateRule:function(e,t,n){return"@viewport"===e||"@-ms-viewport"===e?new W(e,t,n):null}},H=function(){function e(e,t,n){this.type="simple",this.key=void 0,this.value=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.value=t,this.options=n}return e.prototype.toString=function(e){if(Array.isArray(this.value)){for(var t="",n=0;n<this.value.length;n++)t+=this.key+" "+this.value[n]+";",this.value[n+1]&&(t+="\n");return t}return this.key+" "+this.value+";"},e}(),J={"@charset":!0,"@import":!0,"@namespace":!0},z=[P,E,L,q,G,F,{onCreateRule:function(e,t,n){return e in J?new H(e,t,n):null}}],$={process:!0},Y={force:!0,process:!0},K=function(){function e(e){this.map={},this.raw={},this.index=[],this.counter=0,this.options=void 0,this.classes=void 0,this.keyframes=void 0,this.options=e,this.classes=e.classes,this.keyframes=e.keyframes}var t=e.prototype;return t.add=function(e,t,n){var i=this.options,s=i.parent,o=i.sheet,a=i.jss,u=i.Renderer,l=i.generateId,h=i.scoped,c=Object(r.a)({classes:this.classes,parent:s,sheet:o,jss:a,Renderer:u,generateId:l,scoped:h,name:e,keyframes:this.keyframes,selector:void 0},n),d=e;e in this.raw&&(d=e+"-d"+this.counter++),this.raw[d]=t,d in this.classes&&(c.selector="."+R(this.classes[d]));var f=p(d,t,c);if(!f)return null;this.register(f);var y=void 0===c.index?this.index.length:c.index;return this.index.splice(y,0,f),f},t.get=function(e){return this.map[e]},t.remove=function(e){this.unregister(e),delete this.raw[e.key],this.index.splice(this.index.indexOf(e),1)},t.indexOf=function(e){return this.index.indexOf(e)},t.process=function(){var e=this.options.jss.plugins;this.index.slice(0).forEach(e.onProcessRule,e)},t.register=function(e){this.map[e.key]=e,e instanceof k?(this.map[e.selector]=e,e.id&&(this.classes[e.key]=e.id)):e instanceof A&&this.keyframes&&(this.keyframes[e.name]=e.id)},t.unregister=function(e){delete this.map[e.key],e instanceof k?(delete this.map[e.selector],delete this.classes[e.key]):e instanceof A&&delete this.keyframes[e.name]},t.update=function(){var e,t,n;if("string"==typeof(arguments.length<=0?void 0:arguments[0])?(e=arguments.length<=0?void 0:arguments[0],t=arguments.length<=1?void 0:arguments[1],n=arguments.length<=2?void 0:arguments[2]):(t=arguments.length<=0?void 0:arguments[0],n=arguments.length<=1?void 0:arguments[1],e=null),e)this.updateOne(this.map[e],t,n);else for(var r=0;r<this.index.length;r++)this.updateOne(this.index[r],t,n)},t.updateOne=function(t,n,r){void 0===r&&(r=$);var i=this.options,s=i.jss.plugins,o=i.sheet;if(t.rules instanceof e)t.rules.update(n,r);else{var a=t,u=a.style;if(s.onUpdate(n,t,o,r),r.process&&u&&u!==a.style){for(var l in s.onProcessStyle(a.style,a,o),a.style){var h=a.style[l];h!==u[l]&&a.prop(l,h,Y)}for(var c in u){var d=a.style[c],f=u[c];null==d&&d!==f&&a.prop(c,null,Y)}}}},t.toString=function(e){for(var t="",n=this.options.sheet,r=!!n&&n.options.link,i=0;i<this.index.length;i++){var s=this.index[i].toString(e);(s||r)&&(t&&(t+="\n"),t+=s)}return t},e}(),X=function(){function e(e,t){for(var n in this.options=void 0,this.deployed=void 0,this.attached=void 0,this.rules=void 0,this.renderer=void 0,this.classes=void 0,this.keyframes=void 0,this.queue=void 0,this.attached=!1,this.deployed=!1,this.classes={},this.keyframes={},this.options=Object(r.a)({},t,{sheet:this,parent:this,classes:this.classes,keyframes:this.keyframes}),t.Renderer&&(this.renderer=new t.Renderer(this)),this.rules=new K(this.options),e)this.rules.add(n,e[n]);this.rules.process()}var t=e.prototype;return t.attach=function(){return this.attached||(this.renderer&&this.renderer.attach(),this.attached=!0,this.deployed||this.deploy()),this},t.detach=function(){return this.attached?(this.renderer&&this.renderer.detach(),this.attached=!1,this):this},t.addRule=function(e,t,n){var r=this.queue;this.attached&&!r&&(this.queue=[]);var i=this.rules.add(e,t,n);return i?(this.options.jss.plugins.onProcessRule(i),this.attached?this.deployed?(r?r.push(i):(this.insertRule(i),this.queue&&(this.queue.forEach(this.insertRule,this),this.queue=void 0)),i):i:(this.deployed=!1,i)):null},t.insertRule=function(e){this.renderer&&this.renderer.insertRule(e)},t.addRules=function(e,t){var n=[];for(var r in e){var i=this.addRule(r,e[r],t);i&&n.push(i)}return n},t.getRule=function(e){return this.rules.get(e)},t.deleteRule=function(e){var t="object"==typeof e?e:this.rules.get(e);return!(!t||this.attached&&!t.renderable)&&(this.rules.remove(t),!(this.attached&&t.renderable&&this.renderer)||this.renderer.deleteRule(t.renderable))},t.indexOf=function(e){return this.rules.indexOf(e)},t.deploy=function(){return this.renderer&&this.renderer.deploy(),this.deployed=!0,this},t.update=function(){var e;return(e=this.rules).update.apply(e,arguments),this},t.updateOne=function(e,t,n){return this.rules.updateOne(e,t,n),this},t.toString=function(e){return this.rules.toString(e)},e}(),Q=function(){function e(){this.plugins={internal:[],external:[]},this.registry=void 0}var t=e.prototype;return t.onCreateRule=function(e,t,n){for(var r=0;r<this.registry.onCreateRule.length;r++){var i=this.registry.onCreateRule[r](e,t,n);if(i)return i}return null},t.onProcessRule=function(e){if(!e.isProcessed){for(var t=e.options.sheet,n=0;n<this.registry.onProcessRule.length;n++)this.registry.onProcessRule[n](e,t);e.style&&this.onProcessStyle(e.style,e,t),e.isProcessed=!0}},t.onProcessStyle=function(e,t,n){for(var r=0;r<this.registry.onProcessStyle.length;r++)t.style=this.registry.onProcessStyle[r](t.style,t,n)},t.onProcessSheet=function(e){for(var t=0;t<this.registry.onProcessSheet.length;t++)this.registry.onProcessSheet[t](e)},t.onUpdate=function(e,t,n,r){for(var i=0;i<this.registry.onUpdate.length;i++)this.registry.onUpdate[i](e,t,n,r)},t.onChangeValue=function(e,t,n){for(var r=e,i=0;i<this.registry.onChangeValue.length;i++)r=this.registry.onChangeValue[i](r,t,n);return r},t.use=function(e,t){void 0===t&&(t={queue:"external"});var n=this.plugins[t.queue];-1===n.indexOf(e)&&(n.push(e),this.registry=[].concat(this.plugins.external,this.plugins.internal).reduce((function(e,t){for(var n in t)n in e&&e[n].push(t[n]);return e}),{onCreateRule:[],onProcessRule:[],onProcessStyle:[],onProcessSheet:[],onChangeValue:[],onUpdate:[]}))},e}(),Z=function(){function e(){this.registry=[]}var t=e.prototype;return t.add=function(e){var t=this.registry,n=e.options.index;if(-1===t.indexOf(e))if(0===t.length||n>=this.index)t.push(e);else for(var r=0;r<t.length;r++)if(t[r].options.index>n)return void t.splice(r,0,e)},t.reset=function(){this.registry=[]},t.remove=function(e){var t=this.registry.indexOf(e);this.registry.splice(t,1)},t.toString=function(e){for(var t=void 0===e?{}:e,n=t.attached,r=function(e,t){if(null==e)return{};var n,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(t,["attached"]),i="",s=0;s<this.registry.length;s++){var o=this.registry[s];null!=n&&o.attached!==n||(i&&(i+="\n"),i+=o.toString(r))}return i},u(e,[{key:"index",get:function(){return 0===this.registry.length?0:this.registry[this.registry.length-1].options.index}}]),e}(),ee=new Z,te="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window&&window.Math===Math?window:"undefined"!=typeof self&&self.Math===Math?self:Function("return this")(),ne="2f1acc6c3a606b082e5eef5e54414ffb";null==te[ne]&&(te[ne]=0);var re=te[ne]++,ie=function(e){void 0===e&&(e={});var t=0;return function(n,r){t+=1;var i="",s="";return r&&(r.options.classNamePrefix&&(s=r.options.classNamePrefix),null!=r.options.jss.id&&(i=String(r.options.jss.id))),e.minify?""+(s||"c")+re+i+t:s+n.key+"-"+re+(i?"-"+i:"")+"-"+t}},se=function(e){var t;return function(){return t||(t=e()),t}},oe=function(e,t){try{return e.attributeStyleMap?e.attributeStyleMap.get(t):e.style.getPropertyValue(t)}catch(e){return""}},ae=function(e,t,n){try{var r=n;if(Array.isArray(n)&&(r=v(n,!0),"!important"===n[n.length-1]))return e.style.setProperty(t,r,"important"),!0;e.attributeStyleMap?e.attributeStyleMap.set(t,r):e.style.setProperty(t,r)}catch(e){return!1}return!0},ue=function(e,t){try{e.attributeStyleMap?e.attributeStyleMap.delete(t):e.style.removeProperty(t)}catch(e){}},le=function(e,t){return e.selectorText=t,e.selectorText===t},he=se((function(){return document.querySelector("head")}));function ce(e){var t=ee.registry;if(t.length>0){var n=function(e,t){for(var n=0;n<e.length;n++){var r=e[n];if(r.attached&&r.options.index>t.index&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e);if(n&&n.renderer)return{parent:n.renderer.element.parentNode,node:n.renderer.element};if((n=function(e,t){for(var n=e.length-1;n>=0;n--){var r=e[n];if(r.attached&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e))&&n.renderer)return{parent:n.renderer.element.parentNode,node:n.renderer.element.nextSibling}}var r=e.insertionPoint;if(r&&"string"==typeof r){var i=function(e){for(var t=he(),n=0;n<t.childNodes.length;n++){var r=t.childNodes[n];if(8===r.nodeType&&r.nodeValue.trim()===e)return r}return null}(r);if(i)return{parent:i.parentNode,node:i.nextSibling}}return!1}var de=se((function(){var e=document.querySelector('meta[property="csp-nonce"]');return e?e.getAttribute("content"):null})),fe=function(e,t,n){try{if("insertRule"in e)e.insertRule(t,n);else if("appendRule"in e){e.appendRule(t)}}catch(e){return!1}return e.cssRules[n]},pe=function(e,t){var n=e.cssRules.length;return void 0===t||t>n?n:t},ye=function(){function e(e){this.getPropertyValue=oe,this.setProperty=ae,this.removeProperty=ue,this.setSelector=le,this.element=void 0,this.sheet=void 0,this.hasInsertedRules=!1,this.cssRules=[],e&&ee.add(e),this.sheet=e;var t,n=this.sheet?this.sheet.options:{},r=n.media,i=n.meta,s=n.element;this.element=s||((t=document.createElement("style")).textContent="\n",t),this.element.setAttribute("data-jss",""),r&&this.element.setAttribute("media",r),i&&this.element.setAttribute("data-meta",i);var o=de();o&&this.element.setAttribute("nonce",o)}var t=e.prototype;return t.attach=function(){if(!this.element.parentNode&&this.sheet){!function(e,t){var n=t.insertionPoint,r=ce(t);if(!1!==r&&r.parent)r.parent.insertBefore(e,r.node);else if(n&&"number"==typeof n.nodeType){var i=n,s=i.parentNode;s&&s.insertBefore(e,i.nextSibling)}else he().appendChild(e)}(this.element,this.sheet.options);var e=Boolean(this.sheet&&this.sheet.deployed);this.hasInsertedRules&&e&&(this.hasInsertedRules=!1,this.deploy())}},t.detach=function(){if(this.sheet){var e=this.element.parentNode;e&&e.removeChild(this.element),this.sheet.options.link&&(this.cssRules=[],this.element.textContent="\n")}},t.deploy=function(){var e=this.sheet;e&&(e.options.link?this.insertRules(e.rules):this.element.textContent="\n"+e.toString()+"\n")},t.insertRules=function(e,t){for(var n=0;n<e.index.length;n++)this.insertRule(e.index[n],n,t)},t.insertRule=function(e,t,n){if(void 0===n&&(n=this.element.sheet),e.rules){var r=e,i=n;if("conditional"===e.type||"keyframes"===e.type){var s=pe(n,t);if(!1===(i=fe(n,r.toString({children:!1}),s)))return!1;this.refCssRule(e,s,i)}return this.insertRules(r.rules,i),i}var o=e.toString();if(!o)return!1;var a=pe(n,t),u=fe(n,o,a);return!1!==u&&(this.hasInsertedRules=!0,this.refCssRule(e,a,u),u)},t.refCssRule=function(e,t,n){e.renderable=n,e.options.parent instanceof X&&(this.cssRules[t]=n)},t.deleteRule=function(e){var t=this.element.sheet,n=this.indexOf(e);return-1!==n&&(t.deleteRule(n),this.cssRules.splice(n,1),!0)},t.indexOf=function(e){return this.cssRules.indexOf(e)},t.replaceRule=function(e,t){var n=this.indexOf(e);return-1!==n&&(this.element.sheet.deleteRule(n),this.cssRules.splice(n,1),this.insertRule(t,n))},t.getRules=function(){return this.element.sheet.cssRules},e}(),ve=0,ge=function(){function e(e){this.id=ve++,this.version="10.7.1",this.plugins=new Q,this.options={id:{minify:!1},createGenerateId:ie,Renderer:s?ye:null,plugins:[]},this.generateId=ie({minify:!1});for(var t=0;t<z.length;t++)this.plugins.use(z[t],{queue:"internal"});this.setup(e)}var t=e.prototype;return t.setup=function(e){return void 0===e&&(e={}),e.createGenerateId&&(this.options.createGenerateId=e.createGenerateId),e.id&&(this.options.id=Object(r.a)({},this.options.id,e.id)),(e.createGenerateId||e.id)&&(this.generateId=this.options.createGenerateId(this.options.id)),null!=e.insertionPoint&&(this.options.insertionPoint=e.insertionPoint),"Renderer"in e&&(this.options.Renderer=e.Renderer),e.plugins&&this.use.apply(this,e.plugins),this},t.createStyleSheet=function(e,t){void 0===t&&(t={});var n=t.index;"number"!=typeof n&&(n=0===ee.index?0:ee.index+1);var i=new X(e,Object(r.a)({},t,{jss:this,generateId:t.generateId||this.generateId,insertionPoint:this.options.insertionPoint,Renderer:this.options.Renderer,index:n}));return this.plugins.onProcessSheet(i),i},t.removeStyleSheet=function(e){return e.detach(),ee.remove(e),this},t.createRule=function(e,t,n){if(void 0===t&&(t={}),void 0===n&&(n={}),"object"==typeof e)return this.createRule(void 0,e,t);var i=Object(r.a)({},n,{name:e,jss:this,Renderer:this.options.Renderer});i.generateId||(i.generateId=this.generateId),i.classes||(i.classes={}),i.keyframes||(i.keyframes={});var s=p(e,t,i);return s&&this.plugins.onProcessRule(s),s},t.use=function(){for(var e=this,t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return n.forEach((function(t){e.plugins.use(t)})),this},e}();function me(e){var t=null;for(var n in e){var r=e[n],i=typeof r;if("function"===i)t||(t={}),t[n]=r;else if("object"===i&&null!==r&&!Array.isArray(r)){var s=me(r);s&&(t||(t={}),t[n]=s)}}return t}var be=function(){function e(){this.length=0,this.sheets=new WeakMap}var t=e.prototype;return t.get=function(e){var t=this.sheets.get(e);return t&&t.sheet},t.add=function(e,t){this.sheets.has(e)||(this.length++,this.sheets.set(e,{sheet:t,refs:0}))},t.manage=function(e){var t=this.sheets.get(e);if(t)return 0===t.refs&&t.sheet.attach(),t.refs++,t.sheet;Object(o.a)(!1,"[JSS] SheetsManager: can't find sheet to manage")},t.unmanage=function(e){var t=this.sheets.get(e);t?t.refs>0&&(t.refs--,0===t.refs&&t.sheet.detach()):Object(o.a)(!1,"SheetsManager: can't find sheet to unmanage")},u(e,[{key:"size",get:function(){return this.length}}]),e}(),Se="object"==typeof CSS&&null!=CSS&&"number"in CSS,Re=function(e){return new ge(e)},xe=Re();
/**
 * A better abstraction over CSS.
 *
 * @copyright Oleg Isonen (Slobodskoi) / Isonen 2014-present
 * @website https://github.com/cssinjs/jss
 * @license MIT
 */t.default=xe},65:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.UppyLoader=t.Explorer=void 0;const i=r(n(5)),s=r(n(10)),o=n(66),a=n(11),u=[{apiName:"playground",cdn:"https://cloud-storage-integration.playground.blackboardcdn.com"},{apiName:"dev",cdn:"https://cloud-storage-integration.dev.blackboardcdn.com"},{apiName:"default",cdn:"https://cloud-storage-integration.blackboardcdn.com"}];class l{constructor(e,t){this.iframe=e,this.backdrop=t,this.iframeHasLoaded=!1,this.subscribers={success:[],cancel:[],error:[],addAccount:[],deleteAccount:[]},window.addEventListener("message",n=>{if("cancel"===n.data.status){e.style.display="none",t.style.display="none";for(const e of this.subscribers.cancel)e.call(void 0)}if("success"===n.data.status){e.style.display="none",t.style.display="none";for(const e of this.subscribers.success)e.call(void 0,n.data.files)}}),this.iframe.addEventListener("load",()=>{this.iframeHasLoaded=!0})}postMessageToIframe(e,t){var n;const r={status:e.toString(),options:t};this.iframeHasLoaded?null===(n=this.iframe.contentWindow)||void 0===n||n.postMessage(r,this.iframe.src):this.iframe.addEventListener("load",()=>{var e;null===(e=this.iframe.contentWindow)||void 0===e||e.postMessage(r,this.iframe.src)})}update(e){this.postMessageToIframe(a.MessageStatus.options,e)}choose(){this.iframe.style.display="block",this.backdrop.style.display="block",this.postMessageToIframe(a.MessageStatus.open)}logout(){this.postMessageToIframe(a.MessageStatus.logout)}on(e,t){switch(e){case"success":this.subscribers.success.push(t);break;case"cancel":this.subscribers.cancel.push(t);break;case"error":this.subscribers.error.push(t);break;case"addAccount":this.subscribers.addAccount.push(t);break;case"deleteAccount":this.subscribers.deleteAccount.push(t);break;default:throw new Error("unknown event")}}}t.Explorer=l;class h{constructor(){var e;this.explorer=e=>{var t,n;const r=null!==(t=e.text_direction)&&void 0!==t?t:"ltr",i=document.createElement("iframe");i.id="cloud-storage-iframe-"+Math.floor(Math.random()*10**12),i.classList.add("kloudless-modal",this.iframeStyleSheet.classes.modal),i.classList.add("cloud-storage-integration-modal",this.iframeStyleSheet.classes.modal),i.setAttribute("title","explorer"),i.setAttribute("dir",r);const s=new URL(this.getExplorerUrl(e)+"/explorer/explorer.html");s.searchParams.append("origin",window.origin),s.searchParams.append("base_url",null!==(n=e.base_url)&&void 0!==n?n:""),s.searchParams.append("text_direction",r),!1===e.multiselect&&s.searchParams.append("allow_single_file","true"),e.show_dummy_provider&&s.searchParams.append("show_dummy_provider","true"),i.setAttribute("src",s.toString()),i.style.display="none",document.body.appendChild(i);return null===document.getElementById("cloud-storage-backdrop")&&document.body.appendChild(this.backdrop),new l(i,this.backdrop)},this.currentScriptUrl=null===(e=document.currentScript)||void 0===e?void 0:e.src,i.default.use(s.default()),this.globalStyleSheet=i.default.createStyleSheet(o.globalStyle).attach(),this.iframeStyleSheet=i.default.createStyleSheet(o.iframeStyle,{classNamePrefix:"cloud-storage-integration-"}).attach(),this.backdropStyleSheet=i.default.createStyleSheet(o.backdropStyle,{classNamePrefix:"cloud-storage-integration-"}).attach(),this.backdrop=document.getElementById("cloud-storage-backdrop"),this.backdrop=document.createElement("div"),this.backdrop.id="cloud-storage-backdrop",this.backdrop.classList.add(this.backdropStyleSheet.classes.backdrop)}getExplorerUrl(e){var t,n,r;if(e.use_loader_explorer){const e=this.currentScriptUrl.split("/"),t=e.indexOf("loader");if(t>0){return e.slice(0,t).join("/")}console.error("uppy: ERROR: nonstandard currentScript url.  Cannot use loader explorer")}const i=null!==(t=null==e?void 0:e.base_url)&&void 0!==t?t:"";return null!==(r=null===(n=u.find(e=>i.indexOf(e.apiName)>0))||void 0===n?void 0:n.cdn)&&void 0!==r?r:u[u.length-1].cdn}authenticator(){}}t.UppyLoader=h,window.Kloudless=new h},66:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.backdropStyle=t.iframeStyle=t.globalStyle=void 0,t.globalStyle={"@global":{}},t.iframeStyle={modal:{display:"block","box-sizing":"border-box",position:"fixed",top:"20%",left:"50%",width:"640px",height:"60vh",transform:"translateX(-50%)",border:"solid 0 #666","border-radius":"2px","box-shadow":"0 0 10px rgba(0,0,0,0.4)",transition:"all 0","-webkit-transition":"all 0","z-index":"9999","background-color":"#fafafa"},"@media only screen and (max-width:1024px), only screen and (max-height:768px), only screen and (max-device-width:1024px), only screen and (max-device-height:768px)":{modal:{height:"84vh",top:"8%"}},"@media only screen and (max-width:640px), only screen and (max-height:512px), only screen and (max-device-width:640px), only screen and (max-device-height:512px)":{modal:{width:"1px","min-width":"100%",height:"100%",top:"0",left:"0",transform:"none"}}},t.backdropStyle={backdrop:{position:"fixed",margin:"0",top:"0",left:"0",padding:"0",width:"100%",height:"100%",display:"none","background-color":"rgba(0,0,0,0.6)","z-index":"9998",opacity:".5"}}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,